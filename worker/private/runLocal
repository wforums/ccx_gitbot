#!/bin/bash

# This script will run the test suite, but it needs the next arguments for this:
# - token
# - local location
# - branch that needs to be switched to
# - commit hash (short or long)
#
# All arguments are required
if [ "$#" -ne 4 ]; then
	echo "Illegal number of arguments provided!"
	echo "Expected 4 arguments, got $#"
	echo "Given arguments: $@"
	exit
fi

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Variables
. "$DIR/variables"

# Set arguments as easier accessible variables
token=$1
github=$2
branch=$3
commit=$4

# Functions to shorten the script

# Post status to the server
function postStatus {
    curl -s -A "$userAgent" --data "token=$token&type=progress&status=$1&message=$2" -w "\n" $reportURL >> "$reportFolder/log.html"
}
# Exit script and post abort status
function haltAndCatchFire {
	postStatus "error" $1 >> "$reportFolder/log.html"
	curl -s -A "$userAgent" --form "token=$token" --form "type=upload" --form "html=@$reportFolder/log.html" -w "\n" $reportURL
	echo "Exiting runLocal script"
	exit
}
# Fail when the exit status is not equal to 0
function executeCommand {
	echo "executing command: $@"
	"$@" >> "$reportFolder/log.html"
	local status=$?
	if [ $status -ne 0 ]; then
		echo "Failed command ($status): $@"
		haltAndCatchFire "" # No message needed as we post before anyway
	fi
}

# Clean report folder
rm -rf $reportFolder/*

echo "Tester dir: $testerDir" >> "log.txt"

# Change to github folder
executeCommand cd "$github"
# Update the local repository
skipRevert=0
if [ $branch == "-_-" ]; then
	# This is a PR, so fetch the pull request
	postStatus "preparation" "git fetch PR"
	executeCommand git fetch origin "pull/$commit/head:pr"
	branch="pr"
	skipRevert=1
else
	# Git fetch returns 1 on nothing to fetch... Not possible to pass to executeCommand :(
	postStatus "preparation" "git fetch commit"
	git fetch
	status=$?
	if [ $status -gt 1 ]; then
		echo "Git fetch failed: $status"
		haltAndCatchFire "" # No message needed as we post before anyway
	fi
fi

postStatus "preparation" "change branch"
# Checkout the branch
executeCommand git checkout $branch

if [ $skipRevert -eq 0]; then
	postStatus "preparation" "reverting to commit"
	# Reset head to the commit
	executeCommand git reset --hard $commit
fi

postStatus "preparation" "building CCExtractor"
# Go to linux build folder
executeCommand cd linux
# Build CCExtractor using the bash build script
./build >> "$reportFolder/log.html"
# Check if build succeeded
if [ -x "ccextractor" ]; then
	chmod 700 ccextractor
	# Run testSuite
	postStatus "running" "test suite"
	executeCommand cd "$testerDir"
	executeCommand $tester -c $config -t $testFile -e "$github/linux/ccextractor" -o 3000 -f $resultFolder -s $sampleFolder -r $reportFolder
	# Upload results
	postStatus "finalization" "uploading result files"
	for f in $(find $reportFolder -name "*.html");
	do
		curl -A "$userAgent" --form "token=$token" --form "type=upload" --form "html=@$f" -w "\n" $reportURL >> "$reportFolder/log.html"
	done
	postStatus "finalized" "finished"
	# Clean report folder
    rm -rf $reportFolder/*
else
	haltAndCatchFire "build"
fi