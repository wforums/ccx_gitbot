#!/bin/bash

# This script will run the test suite, but it needs the next arguments for this:
# - token
# - github location (or just a git location that can be pulled using git clone xxx
# - branch that needs to be switched to
# - commit hash (short or long)
#
# All arguments are required
if [ "$#" -ne 4 ]; then
	echo "Illegal number of arguments provided!"
	echo "Expected 4 arguments, got $#"
	echo "Given arguments: $@"
	exit
fi

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Variables
. "$DIR/variables"

# Set arguments as easier accessible variables
token=$1
github=$2
branch=$3
commit=$4

# Functions to shorten the script

# Post status to the server
function postStatus {
    curl -s -A "$userAgent" --data "token=$token&type=progress&status=$1&message=$2" -w "\n" $reportURL >> "$reportFolder/log.html"
}
# Exit script and post abort status
function haltAndCatchFire {
	postStatus "error" $1 >> "$reportFolder/log.html"
	curl -s -A "$userAgent" --form "token=$token" --form "type=upload" --form "html=@$reportFolder/log.html" -w "\n" $reportURL
	sudo shutdown -h now
	#echo "Would shut down now"
	#exit
}
# Fail when the exit status is not equal to 0
function executeCommand {
	#echo "$@" 
	"$@" >> "$reportFolder/log.html"
	local status=$?
	if [ $status -ne 0 ]; then
		haltAndCatchFire "" # No message needed as we post before anyway
	fi
}

# Copy the latest version of the test suite from the repo to the test folder
cp "$newTestSuite/CCExtractorTester.exe" $testerDir >> "$reportFolder/log.html"

postStatus "preparation" "git clone"
# Clone into git directory
executeCommand git clone $github "$repoDir"

postStatus "preparation" "change branch"
# Change to github folder
executeCommand cd "$repoDir"
# Checkout the branch
executeCommand git checkout $branch

postStatus "preparation" "reverting to commit"
# Reset head to the commit
executeCommand git reset --hard $commit

postStatus "preparation" "building CCExtractor"
# Go to linux build folder
executeCommand cd linux
# Build CCExtractor using the bash build script
./build >> "$reportFolder/log.html"
# Check if build succeeded
if [ -x "ccextractor" ]; then
	chmod 700 ccextractor
	# Run testSuite
	postStatus "running" "test suite"
	executeCommand cd "$testerDir"
	executeCommand $tester -c $config -t $testFile -e "$repoDir/linux/ccextractor" -o 3000 -f $resultFolder -s $sampleFolder -r $reportFolder
	# Upload results
	postStatus "finalization" "uploading result files"
	for f in $(find $reportFolder -name "*.html");
	do
		curl -A "$userAgent" --form "token=$token" --form "type=upload" --form "html=@$f" -w "\n" $reportURL >> "$reportFolder/log.html"
	done
	postStatus "finalized" "finished"
else
	haltAndCatchFire "build"
fi